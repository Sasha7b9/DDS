#include "stdafx.h"
#ifndef WIN32
#include "defines.h"
#include "Memory.h"
#include <cstring>
#endif


/*
    Распределение памяти начинается с первого байта пула.
*/

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define SIZE_POOL (1 * 1024)
static uint8 pool[SIZE_POOL];

/// Описывает выделенный блок памяти.
struct Block
{
    uint address;   /// Адрес выделенного блока памяти
    uint size;      /// Размер выделенного блока памяти
};


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Найти свободный участок памяти. Если памяти нет - возвращает ноль.
static void *FindRegion(uint size);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Memory::Init()
{
    std::memset(pool, 0, SIZE_POOL);
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void *Memory::Allocate(uint size)
{


    return 0;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Memory::Free(void *address)
{

}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
static void *FindRegion(uint size)
{

}
