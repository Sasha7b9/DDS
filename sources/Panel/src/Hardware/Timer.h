#pragma once
#include "defines.h"


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/** @addtogroup Hardware
 *  @{
 *  @defgroup Timer
 *  @brief Разные таймеры
 *  @{
 */

typedef enum
{
    kPressKey,                  ///< Нужно устанавливать, когда приходит нажатие клавиши.
    kShowLevelRShiftA,          ///< Нужно устанавливать, когда изменяется положение ручки смещения канала 1.
    kShowLevelRShiftB,          ///< Нужно устанавливать, когда изменяется положение ручки смещения канала 2.
    kShowLevelTrigLev,          ///< Нужно устанавливать, когда изменяется положение ручки уровня синхронизации
    kENumSignalsInSec,           ///< Для установки количества считываний сигнала в секунду.
    kFlashDisplay,              ///< Таймер для мерцающих участков экрана чёрно-белого дисплея.
    kShowMessages,              ///< Таймер для засекания время показа информационных и предупреждающих сообщений.
    kMenuAutoHide,              ///< Таймер для отсчёта времени скрывания меню.
    kRShiftMarkersAutoHide,     ///< Таймер для отсчёта времени скрывания дополнительных боковых меток.
    kUSB,                       ///< Вспомогательный, для общих нужд.
    kStopSound,                 ///< Выключить звук
    kTemporaryPauseFPGA,        ///< Временная пауза для фиксации сигнала на экране после поворота ручек
    kStrNaviAutoHide,           ///< Прятать строку навигации меню
    kTimerStartP2P,             ///< Таймер для запуска следующего цикла поточечного чтения
    kTimerDisplay,              ///< Таймер на ручную отрисовку экрана
    NumTimers
} TypeTimer2;


class Timer
{
friend class CPU;

private:
    
    static void Init();

public:
    /// Назначает таймеру timer функцию и время срабатывания
    static void Set(TypeTimer2 type, pFuncVV func, uint dTms);

    static void SetAndStartOnce(TypeTimer2 type, pFuncVV func, uint dTms);

    static void SetAndEnable(TypeTimer2 type, pFuncVV func, uint dTms);

    static void StartOnce(TypeTimer2 type);

    static void Enable(TypeTimer2 type);

    static void Disable(TypeTimer2 type);

    static bool IsRun(TypeTimer2 type);

    static void PauseOnTime(uint timeMS);

    static void PauseOnTicks(uint numTicks);
    /// Устанавливает стартовую точку логгирования. Далее вызовы Timer_LogPoint засекают временные интервалы от это точки
    static void StartLogging();

    static uint LogPointUS(char *name);

    static uint LogPointMS(char *name);

};

/** @}  @}
 */
