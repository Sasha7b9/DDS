#include "defines.h"
#include "SCPI.h"
#include "Command.h"
#include "Display/Console.h"
#include "SCPI/Commands.h"
#include <cstdlib>


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
SCPI::Buffer SCPI::buffer;
uint8        SCPI::Buffer::data[SIZE_BUFFER];
int          SCPI::Buffer::used = 0;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void SCPI::Init()
{
    Buffer::Clear();
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
bool SCPI::Handler::Processing(SimpleMessage *msg)
{
    msg->ResetPointer();

    ::Command::E command = (::Command::E)msg->TakeByte();

    if (command == ::Command::SCPI_Data)
    {
        Buffer::AddData(msg);

        Buffer::RunAndCompress();
    }

    return false;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void SCPI::Buffer::AddData(SimpleMessage *msg)
{
    uint length = msg->TakeWord();

    for (uint i = 0; i < length; i++)
    {
        AddByte(msg->TakeByte());
    }
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void SCPI::Buffer::AddByte(uint8 byte)
{
    data[used++] = byte;
    if (used == SIZE_BUFFER)
    {
        used = SIZE_BUFFER - 1;
        std::memcpy(data, data + 1, SIZE_BUFFER - 1);
    }
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void SCPI::Buffer::RunAndCompress()
{
    static const StructCommand commands[] =
    {
        {"*IDN?",       SCPI::Process::IDN},
        {"*RST",        SCPI::Process::RST},
        {"CHANNEL",     SCPI::Process::Channel},
        {"FREQUENCY",   SCPI::Process::Frequency},
        {"FORM",        SCPI::Process::Form},
        {"AMPLITUDE",   SCPI::Process::Amplitude},
        {nullptr, nullptr}
    };
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
uint8 *SCPI::ProcessingCommand(const StructCommand * /*commands*/, uint8 * /*data*/)
{
    return nullptr;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void SCPI::Process::IDN()
{
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void SCPI::Process::RST()
{
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void SCPI::Process::Channel()
{
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void SCPI::Process::Frequency()
{
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void SCPI::Process::Form()
{
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void SCPI::Process::Amplitude()
{
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void SCPI::Buffer::Clear()
{
    used = 0;
}
