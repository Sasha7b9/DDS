#include "stdafx.h"
#ifndef WIN32
#include "defines.h"
#include "log.h"
#include "Packet.h"
#include "Hardware/CPU.h"
#include <cstring>
#endif


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint Packet::transcievedPackets = 0;


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Packet::Packet()
{
    std::memset(&data, 0, sizeof(data));
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Packet::CreateNew(uint8 *buffer, uint size)
{
    if (size <= MAX_SIZE_DATA_FIELD)
    {
        std::memcpy(DataField(), buffer, size);
        FillServiceField(size);
    }
    else
    {
        LOG_ERROR("Данные не помещаются в пакет");
    }
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Packet::CopyFrom(const Packet *packet)
{
    std::memcpy(this, packet, sizeof(Packet));
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
uint8 *Packet::DataField()
{
    return (uint8 *)&data.data[0];
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Packet::FillServiceField(uint sizeData)
{
    data.numberPacket = ++transcievedPackets;
    data.size = sizeData;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
bool Packet::IsEquals(Packet *rhs) const
{
    return std::memcmp((void *)&data, &rhs->data, sizeof(Data)) == 0;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
uint8 *Packet::Begin()
{
    return (uint8 *)&data;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
uint Packet::Size() const
{
    return SIZE;
}
