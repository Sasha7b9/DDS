#include "stdafx.h"
#ifndef WIN32
#include "defines.h"
#include "log.h"
#include "Packet.h"
#include "Hardware/CPU.h"
#include <cstring>
#endif


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint Packet::transcievedPackets = 0;


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Packet::Packet()
{
    std::memset(&data, 0, sizeof(data));
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Packet::CreateNew(uint8 *buffer, uint size)
{
    if (size <= MAX_SIZE_DATA_FIELD)
    {
        std::memcpy(DataField(), buffer, size);
        FillServiceField(size);
    }
    else
    {
        LOG_ERROR("Данные не помещаются в пакет");
    }
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Packet::CopyFrom(const Packet *packet)
{
    std::memcpy(this, packet, sizeof(Packet));
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
uint8 *Packet::DataField()
{
    return (uint8 *)&data.data[0];
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Packet::FillServiceField(uint sizeData)
{
    data.numberPacket = ++transcievedPackets;
    data.size = sizeData;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
bool Packet::IsEquals(Packet *rhs) const
{
    bool result = std::memcmp((void *)&data, &rhs->data, sizeof(Data)) == 0;

    if (result)
    {
        LOG_WRITE_FINALIZE("Пакеты одинаковы");
    }
    else
    {
        LOG_WRITE_FINALIZE("Пакеты различаются");
    }

    return result;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
uint8 *Packet::Begin()
{
    return (uint8 *)&data;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
uint Packet::Size() const
{
    return SIZE;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Packet::Log() const
{
    const uint8 *d = ((Packet *)this)->DataField();

    LOG_WRITE_FINALIZE("n=%d, s=%d - %d %d %d %d %d %d %d %d %d %d", data.numberPacket, data.size, d[0], d[1], d[2], d[3], d[4], d[5], d[6], d[7], d[8], d[9]);
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Packet::Modify()
{

}
