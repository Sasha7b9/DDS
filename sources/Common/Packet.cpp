#include "stdafx.h"
#ifndef WIN32
#include "defines.h"
#include "log.h"
#include "Packet.h"
#include "Hardware/CPU.h"
#include <stdlib.h>
#include <string.h>
#endif


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint Packet::transcievedPackets = 0;


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Vector::Vector(uint s) : size(0), buffer(0)
{
	Alloc(s);
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Vector::~Vector()
{
	Free();
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
uint8 *Vector::Begin()
{
	return buffer;
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
uint Vector::Size()
{
	return size;
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Vector::Alloc(uint _size)
{
	Free();

    if (_size)
    {
        buffer = (uint8 *)malloc(_size);
        if (buffer)
        {
            size = _size;
            memset(buffer, 0, _size);
        }
    }
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Vector::Free()
{
	free(buffer);
	size = 0;
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Vector::Resize(uint _size)
{
    Free();
    Alloc(_size);
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
bool Vector::IsEquals(Vector *rhs) const
{
    if (size != rhs->size)
    {
        return false;
    }

    uint8 *left = (uint8 *)buffer;
    uint8 *right = (uint8 *)rhs->buffer;

    for (uint i = 0; i < size; i++)
    {
        if (*left++ != *right++)
        {
            return false;
        }
    }

    return true;
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Packet::Packet()
{
    data.Resize(SIZE);
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Packet::Create(uint8 *buffer, uint size)
{
    if (size <= MAX_SIZE_DATA_FIELD)
    {
        memcpy(DataField(), buffer, size);
        FillServiceField(size);
    }
    else
    {
        LOG_ERROR("Данные не помещаются в пакет");
    }
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
uint8 *Packet::DataField()
{
    return (uint8 *)data.Begin() + SIZE_SERVICE_FIELD;
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Packet::FillServiceField(uint sizeData)
{
    WriteNumberPacket();
    WriteNumberSubPacket(0);
    WriteSizeData(sizeData);
    WriteCRC();
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
bool Packet::IsEquals(Packet *rhs) const
{
    return data.IsEquals(&rhs->data);
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Packet::WriteNumberPacket()
{
    uint *address = (uint *)(FromBegin(SIZE_FIELD_CRC));

    *address = transcievedPackets++;
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Packet::WriteNumberSubPacket(uint number)
{
    uint *address = (uint *)(FromBegin(SIZE_FIELD_CRC + SIZE_FIELD_NUMBER_PACKET));

    *address = number;
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Packet::WriteSizeData(uint size)
{
    uint8 *address = (uint8 *)(FromBegin(SIZE_FIELD_CRC + SIZE_FIELD_NUMBER_PACKET + SIZE_FIELD_NUMBER_SUBPACKET));

    *address = (uint8)size;
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Packet::WriteCRC()
{
    uint crc32 = CPU::CRC32::Calculate(FromBegin(SIZE_FIELD_CRC), MAX_SIZE_DATA_FIELD);

    uint *address = (uint *)(FromBegin(0));

    *address = crc32;
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
uint8 *Packet::FromBegin(uint offset)
{
    return Begin() + offset;
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
uint8 *Packet::Begin()
{
    return data.Begin();
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
uint Packet::Size() const
{
    return SIZE;
}
